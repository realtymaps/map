#!/bin/bash
set -e

SCRIPT_DIR="$( cd -P "$( dirname "${BASH_SOURCE[0]}" )" > /dev/null && pwd )/.."


if [[ "$1" == "--to" ]]
then
    # means we need to reverse the direction of the clone, to be TO the specified db instead of FROM it 
    shift
    CLONE_SRC=`$SCRIPT_DIR/database/getDbUrl PROPERTY_DATABASE`
    CLONE_DST=`$SCRIPT_DIR/database/getDbUrl $1`?ssl=true
else
    CLONE_SRC=`$SCRIPT_DIR/database/getDbUrl $1`
    CLONE_DST=`$SCRIPT_DIR/database/getDbUrl PROPERTY_DATABASE`
fi
shift


if [[ "$1" == "--clean" ]]
then
    # means we need to drop existing objects before restoring them 
    CLEAN="--clean"
    shift
fi

if [[ "$1" == "--no-rebuild" ]]
then
    # means we don't need to mark anything dirty 
    SKIP_REBUILD="true"
    shift
fi

if [[ "$@" == "" ]]
then
    #if no restrictions are set on what to dump, artificially restrict to the source data tables
    DUMP_OBJECTS="-t corelogic_deed -t corelogic_tax -t mls_listings -t parcels"
else
    DUMP_OBJECTS="$@"
fi

source $SCRIPT_DIR/environmentNormalization/dbsync


# do not include OIDs
echo "CLONE: copying property db objects"
$SCRIPT_DIR/database/clone $CLONE_SRC $CLONE_DST $CLEAN $DUMP_OBJECTS

if [[ "$SKIP_REBUILD" != "true" ]]
then
    echo "CLONE: marking all views as dirty."
    $DBSYNC --path $SCRIPT_DIR/sql --client pg --connection $CLONE_DST --reminder 1 --blindly --forget --files 'mark_all_views_dirty.sql'
fi
