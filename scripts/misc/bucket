#!/usr/bin/env node

/*
Simple script to utilize our aws service

options:
--action: function to call on service.aws
--fileName || --Key: full path of whatever file
--bucket || --extAcctName: bucket name in config_external_accounts
--reminder: causes output every X seconds to show script is still running

--*(any other S3 option for a interactive S3 function), example ContentType
*/

var coffee = require('coffee-script');
coffee.register();

var aws = require('../../backend/services/service.aws'),
  argv = require('yargs').argv,
  fs = require('fs'),
  path = require('path'),
  _ = require('lodash'),
  Promise = require('bluebird'),
  STD_OUT_CMDS = ['listObjects', 'countObjects', 'deleteAllObjects'];


handle = aws[argv.action] || aws.putObject;

if(!handle){
  console.error('handle undefined');
  process.exit(250);
}

if (!argv.bucket) {
  console.error('--bucket required');
  process.exit(122);
}

if (!argv.fileName && (argv.action == 'putObject' || !argv.action)) {
  console.error('--fileName required to putObject!');
  process.exit(123);
}

function getUserHome() {
  return process.env.HOME || process.env.USERPROFILE;
}


var fileName = argv.fileName || argv.Key,
  uploadFileName;

if (fileName &&  !(STD_OUT_CMDS.indexOf(argv.action) > -1)){
  if (fileName.indexOf('~') > -1) {
    fileName = argv.fileName.replace('~', getUserHome());
  }
  console.log("attempting to load file: " + fileName);

  uploadFileName = path.parse(fileName).base;
}

params = _.extend({},{
  extAcctName: argv.bucket
}, _.omit(argv, ['bucket', 'action', 'fileName', 'reminder', 'Key', 'Body', '$0', '_']));

if (uploadFileName){
  params.Key = uploadFileName;
  if(!(['getObject', 'deleteObject'].indexOf(argv.action) > -1))
    params.Body = fs.createReadStream(fileName);
}

if(argv.action === 'getObject')//force node style
  params.nodeStyle = true;

var reminder = null;
if (argv.reminder) {
  function doReminder() {
    console.log(argv.action+' is still running...');
  }
  reminder = setInterval(doReminder, parseInt(argv.reminder)*1000);
}

function exit(code) {
  if (reminder) {
    clearInterval(reminder);
  }
  process.exit(code);
}

if(argv.action === 'upload'){
  return handle = new Promise(function(resolve, reject){
    bodyStream = params.Body;
    delete params.Body;

    handle(params).then(function(upload){
      upload.on('error', function(err){
        console.error(err);
        exit(122);
      });
      upload.on('uploaded', function(details){
        console.log('success');
        console.log(details);
        exit(0);
      });

      bodyStream.pipe(upload);
    })
  })
}

handle(params)
.then(function(ret) {
  var wait = false;
  console.log(argv.action + ' success!!' + (uploadFileName ? ' for file "'+uploadFileName+'"' : ''));
  if(argv.action === 'getObject' && ret){
    wait = true;
    // console.log(ret);
    ret.createReadStream()
    .on('end', function(){
      exit(0);
    })
    .pipe(fs.createWriteStream(uploadFileName));
  }
  if(STD_OUT_CMDS.indexOf(argv.action) > -1)
    console.log(JSON.stringify(ret,null,2));

  if(!wait)
    exit(0);
})
.catch(function(error) {
  console.error(error);
  exit(200);
});
