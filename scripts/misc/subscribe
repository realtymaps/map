#!/usr/bin/env node
//
// Tool for accounting for stripe_subscription_id in `auth_user`.
// Creates new subscriptions for customers that don't already have active subscriptions.
//
// This is a tool meant for resetting and debugging quickly during work on stripe subscription flows.
//
// NOTHING is done on users that already have a `stripe_subscription_id`, even if it's an inactive subscription.
//   (you can make `stripe_subscription_id` null on users for which a new subscription is desired though)
//
// no arguments:
//   same as running with 'all' and applies 'pro' plan
//
// argument #1:
//   customer_id:  <customer_id> | 'all' | 'enrollSuperusers'
//   * `customer_id` is required in order to locate or apply subscription
//   * `enrollSuperusers` will ensure both `customer_id` and `subscription_id` are populated for all superusers
//   * <blank is same as 'all' but uses default 'pro' plan>
//
// argument #2:
//   plan:    'pro' (default) | 'standard'
//
//
// EXAMPLES:
//
// `foreman run ./scripts/misc/subscribe`
//   - for ALL users, attempt to pull existing subscription and save id to table (could be any plan, pro or standard)
//   - for users without a subscription already, creates a new one with 'pro' plan by default
//
// `foreman run ./scripts/misc/subscribe cus_7khmZ8nGKEOaGL standard`
//   - for user 'cus_7khmZ8nGKEOaGL', attempt to pull existing subscription and save id to table
//   - if no subscription found, creates a new one with 'standard' plan
//
// `foreman run ./scripts/misc/subscribe enrollSuperusers`
//   - all superusers with no customer or subscription id will get a new customer and pro-plan subscription added
//   - if a superuser already has customer_id (but no subscription id), account is queried and either an active 
//     subscription id is saved or a new one is made


var coffee = require('coffee-script');
coffee.register()

var Promise = require('bluebird');
var _ = require('lodash');
var argv = require('yargs').argv;
var stripeBootstrap = require('../../backend/services/payment/stripe/service.payment.impl.stripe.bootstrap');
var tables = require('../../backend/config/tables');


var customer = argv._[0];
var plan = argv._[1] || 'pro';
var failedIds = [];
var successIds = [];

var stripe = null;

var testSourceCC = {
  object: "card",
  number: "4242424242424242",
  exp_month: 01,
  exp_year: 25,
  cvc: 123
}

// customers only need to have one active subscription
// This defensively returns first active one incase multiple
//   active ones got put in for some reason
getFirstActiveSubscription = function(stripe_customer_id) {
  return stripe.customers.listSubscriptions(stripe_customer_id)
  .then( function(response) {
    var subscriptions = response.data;
    var subscription = null;
    var idx = 0;
    while (idx < subscriptions.length && subscription == null) {
      if (subscriptions[idx++].canceled_at == null) subscription = subscriptions[idx-1];
    }
    return subscription
  })
  .catch( function(err){
    failedIds.push(stripe_customer_id);
  })
}

// get sub_id saved to db
saveSubscriptionId = function(stripe_customer_id, stripe_subscription_id, stripe_plan_id) {
  return tables.auth.user().update({
    "stripe_subscription_id": stripe_subscription_id,
    "stripe_plan_id": stripe_plan_id}
  ).where('stripe_customer_id', stripe_customer_id)
  .then( function(){
    successIds.push(stripe_customer_id);
  })
}

// makes a subscription in stripe
createSubscription = function(stripe_customer_id) {
  return stripeBootstrap
  .then( function(stripe) {
    return stripe.customers.createSubscription(stripe_customer_id, {"plan": plan})
    .then( function(response) {
      return saveSubscriptionId(stripe_customer_id, response.id)
    })
    .catch( function(err){
      failedIds.push(stripe_customer_id);
    })
  })
}

// 'list-ify' customers
getCustomerIds = function(customer) {
  if (customer != 'all') return Promise.resolve([customer]);
  return tables.auth.user()
  .select("stripe_customer_id")
  .whereNotNull("stripe_customer_id")
  .whereNull("stripe_subscription_id")
  .then( function(results) {
    // squash down to list of ids
    return _.map(results,'stripe_customer_id');
  })
}

// simply get a list of superusers with their stripe info
getSuperusers = function() {
  return tables.auth.user()
  .select('id', 'stripe_customer_id', 'stripe_subscription_id', 'email')
  .where({is_superuser: true, stripe_subscription_id: null})
}

// creates a customer for the user, and applies a subscription
createCustomerId = function(user_id, email) {
  return stripe.customers.create({source: testSourceCC, plan: plan, email: email})
  .then( function(response){
    var subscriptions = response.subscriptions.data;
    var subscription = null;
    var idx = 0;
    while (idx < subscriptions.length && subscription == null) {
      if (subscriptions[idx++].canceled_at == null) subscription = subscriptions[idx-1];
    }

    var obj = {customer_id: response.id, subscription_id: subscription.id}
    return tables.auth.user().update({
      "stripe_customer_id": obj.customer_id,
      "stripe_subscription_id": obj.subscription_id
    })
    .where('id', user_id)
    .then( function(){
      successIds.push(obj.customer_id);
      return obj
    })
  });
}


// main
stripeBootstrap
.then( function(s){
  stripe = s;
})
.then( function(){

  // make sure all superusers have both customer and subscription ids
  if (customer == 'enrollSuperusers')
    return getSuperusers()
    .then( function(list){
      promises = [];
      list.forEach( function(user){
        customer_id = user.stripe_customer_id

        // procure a customer_id
        getCustomerId = (!customer_id) ? createCustomerId(user.id, user.email) : Promise.resolve({customer_id: customer_id, subscription_id: null});

        // add to users to process
        promises.push(
          getCustomerId
          .then( function(result){

            // if we only have customer_id saved, find one if that customers subscriptions if exists
            if (result.subscription_id == null) {
              return getFirstActiveSubscription(result.customer_id)
              .then( function(active){
                if (typeof(active) != 'undefined' && active) return saveSubscriptionId(result.customer_id, active.id, plan);
                else return createSubscription(result.customer_id);
              })
            }
          })
        );
      });
      Promise.all(promises)
      .then( function(){
        console.log("\n"+successIds.length+" user(s) were successfully updated.")
        if (failedIds.length > 0) {
          console.log("\nThe following ids triggered stripe errors (possibly because they do not exist on the account associated with the active API_KEY):");
          console.log(JSON.stringify(_.uniq(failedIds)));
        }
        process.exit(0);  
      })
    })

  // find / create subscriptions for empty customers
  else
    return getCustomerIds(customer)
    .then( function(list){
      console.log("\n\nRetrieving (or creating) subscriptions for "+list.length+" user(s)...");
      promises = [];
      list.forEach( function(customer_id){
        promises.push(
          getFirstActiveSubscription(customer_id)
          .then( function(active){
            if (typeof(active) != 'undefined' && active) return saveSubscriptionId(customer_id, active.id);
            else return createSubscription(customer_id);
          })
        );
      })
      Promise.all(promises)
      .then( function(result){
        console.log("\n"+successIds.length+" user(s) were successfully updated.")
        if (failedIds.length > 0) {
          console.log("\nThe following ids triggered stripe errors (possibly because they do not exist on the account associated with the active API_KEY):");
          console.log(JSON.stringify(_.uniq(failedIds)));
        }
      })
      .then( function(){
        process.exit(0);  
      })
    })
})
