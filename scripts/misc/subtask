#!/usr/bin/env coffee

###
Simple script to run a subtask at any step directly

options:
--task - task file name
--subtask - subtask function to call on the task
--subtaskStateJson - JSON subtask argument payload
--subtaskStateFile - coffee or js file to require as a payload subtask object
###
Promise = require 'bluebird'
_ = require 'lodash'
argv = require('yargs').argv
rewire = require('rewire')
task = rewire('../../backend/tasks/' + argv.task)
subtask = task.subtasks[argv.subtask]
internal =  require './subtask.internal'

if argv.debug
  console.log argv


#mock jobQueue to call things directly
task.__set__ 'jobQueue',

  queueSubsequentSubtask: ({subtask, laterSubtaskName, manualData, replace}) ->
    subtasksToRun = 0
    promises = []
    if _.isArray manualData
      for data in manualData
        console.log "subtasksToRun: #{subtasksToRun}"
        newSubtask = _.merge {}, subtask,
          data: data
        promises.push internal.getNextSubtask(task, laterSubtaskName)(newSubtask)

        subtasksToRun++

        if subtasksToRun >= parseInt(argv.subtasksToRun)
          break
    Promise.all promises

  queueSubsequentPaginatedSubtask: ({transaction, subtask, totalOrList, maxPage, laterSubtaskName, mergeData}) ->

    if !maxPage?
      return internal.runPagedSubtask {task, subtask, totalOrList, maxPage, laterSubtaskName, mergeData}

    chunks = totalOrList.length / maxPage
    promiseChunks = []
    pagedPerProcess = 4

    totalChunks = for chunkIndex in [0..chunks]
      do (chunkIndex) ->
        start = chunkIndex * maxPage
        totalOrList.slice(start, (start + maxPage) - 1)

    for chunk, chunkIndex in totalChunks
      do (chunk, chunkIndex) ->
        if chunkIndex == 0 or (chunkIndex + 1) % pagedPerProcess == 0
          promiseChunks.push internal.subtaskFork({task, chunkIndex, totalChunks, pagedPerProcess, subtask, maxPage, laterSubtaskName, mergeData})

    Promise.all promiseChunks
    .then () ->
      "done promiseChunks"

if !subtask
  console.error('subtask not found')
  process.exit(123)

payload = if argv.subtaskStateJson then JSON.parse(argv.subtaskStateJson) else
  require('../../' + argv.subtaskStateFile)

if argv.data
  console.log("overriding data!")
  console.log("================")
  data = JSON.parse argv.data
  _.extend payload.data, data
  console.log(payload.data)

console.log "executing: #{argv.subtask}"

subtask(payload)
.then (ret) ->
  console.log 'success'
  # console.log ret
  process.exit(0)
.catch (error) ->
  console.error error
  console.error error.stack
  process.exit(120)
