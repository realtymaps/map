#!/usr/bin/env coffee

###
Simple script to run a subtask at any step directly

options:
--task - task file name
--subtask - subtask function to call on the task
--subtaskStateJson - JSON subtask argument payload
--subtaskStateFile - coffee or js file to require as a payload subtask object
###
Promise = require 'bluebird'
_ = require 'lodash'
argv = require('yargs').argv
rewire = require('rewire')
task = rewire('../../backend/tasks/' + argv.task)
subtask = task.subtasks[argv.subtask]

if argv.debug
  console.log argv

getNextSubtask = (taskName) ->
  console.log "fake get next subtask #{taskName}"
  task.subtasks[taskName]

#mock jobQueue to call things directly
task.__set__ 'jobQueue',

  queueSubsequentSubtask: ({subtask, laterSubtaskName, manualData, replace}) ->
    subtasksToRun = 0
    promises = []
    if _.isArray manualData
      for data in manualData
        console.log "subtasksToRun: #{subtasksToRun}"
        newSubtask = _.merge {}, subtask,
          data: data
        promises.push getNextSubtask(laterSubtaskName)(newSubtask)

        subtasksToRun++

        if subtasksToRun >= parseInt(argv.subtasksToRun)
          break
    Promise.all promises

  queueSubsequentPaginatedSubtask: ({transaction, subtask, totalOrList, maxPage, laterSubtaskName, mergeData}) ->
    totalOrList = _.take totalOrList, maxPage

    console.log "Fake Pagenate taskName: #{laterSubtaskName}"
    console.log "Fake Pagenate totalOrList: #{totalOrList}"
    console.log "Fake Pagenate maxPage: #{maxPage}"

    subtask.data = _.merge {}, subtask.data, mergeData,
      values: totalOrList

    getNextSubtask(laterSubtaskName)(subtask)


if !subtask
  console.error('subtask not found')
  process.exit(123)

payload = if argv.subtaskStateJson then JSON.parse(argv.subtaskStateJson) else
  require('../../' + argv.subtaskStateFile)


console.log "executing: #{argv.subtask}"

subtask(payload)
.then (ret) ->
  console.log 'success'
  # console.log ret
  process.exit(0)
.catch (error) ->
  console.error error
  console.error error.stack
  process.exit(120)
