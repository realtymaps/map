#!/usr/bin/env coffee

###
Simple script to run a subtask at any step directly

options:
--task - task file name
--subtask - subtask function to call on the task
--subtaskStateJson - JSON subtask argument payload
--subtaskStateFile - coffee or js file to require as a payload subtask object
###
Promise = require 'bluebird'
_ = require 'lodash'
argv = require('yargs').argv
rewire = require('rewire')
task = rewire('../../backend/tasks/' + argv.task)
subtask = task.subtasks[argv.subtask]

idsToSubtaskVals = (subtask, ids) ->
  # console.log ids
  subtask.data = _.extend {}, subtask.data,
    values: ids

getNextSubtask = (taskName) ->
  taskName = taskName.split('_')[1]
  console.log "Fake Pagenate: attempting to get #{taskName}"
  task.subtasks[taskName]

mockPagenate = (tansaction, subtask, ids, maxRowsToPage, taskName) ->
  console.log "Fake Pagenate taskName: #{taskName}"
  console.log "Fake Pagenate ids: #{ids}"
  console.log "Fake Pagenate maxRowsToPage: #{maxRowsToPage}"

  idsToSubtaskVals(subtask, ids)
  getNextSubtask(taskName)(subtask)

#mock jobQueue to call things directly
task.__set__ 'jobQueue',

  queueSubsequentSubtask: () ->
    Promise.resolve()

  queueSubsequentPaginatedSubtask: () ->
    mockPagenate arguments...


if !subtask
  console.error('subtask not found')
  process.exit(123)

payload = if argv.subtaskStateJson then JSON.parse(argv.subtaskStateJson) else
  require('../../' + argv.subtaskStateFile)


console.log "executing: #{argv.subtask}"

subtask(payload)
.then (ret) ->
  console.log 'success'
  # console.log ret
  process.exit(0)
.catch (error) ->
  console.error error
  console.error error.stack
  process.exit(120)
