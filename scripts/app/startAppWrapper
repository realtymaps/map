#!/bin/bash
set -e

SCRIPT_DIR="$( cd -P "$( dirname "${BASH_SOURCE[0]}" )" > /dev/null && pwd )/.."
APP_DIR="$SCRIPT_DIR/.."

if [[ "$SKIP_NGINX" == "true" ]]
then
  export NGINX_SOCKET_LOCATION=""
  $SCRIPT_DIR/app/startApp
else
  if [[ "$IS_HEROKU" == "" ]]
  then
    # not on heroku
    
    # first kill off nginx in case it's been lingering -- doing it here so it has time to die
    pkill nginx || true
    
    # next we need to bootstrap the nginx buildpack
    BUILDPACK_DIR=/var/tmp/nginx-buildpack
    if [ ! -e $BUILDPACK_DIR/.git ]
    then
      echo "Installing nginx buildpack..."
      mkdir -p $BUILDPACK_DIR
      mkdir -p ${BUILDPACK_DIR}-env
      cd $BUILDPACK_DIR
      git clone `fgrep nginx $APP_DIR/.buildpacks` .
    else
      echo -n "Updating nginx buildpack...  "
      cd $BUILDPACK_DIR
      git pull
    fi
    export STATIC_ROOT="$APP_DIR/_public"
    ./bin/detect $APP_DIR && ./bin/compile $APP_DIR/nginx ${BUILDPACK_DIR}-cache ${BUILDPACK_DIR}-env && ./bin/release $APP_DIR
    cd $APP_DIR
  fi

  
  mkdir -p ./nginx
  
  # this ensures we never wait more than 60 seconds before letting nginx bind the port;
  # we give a bit of slack for heroku startup overhead, nginx startup, etc
  
  rm -f ./nginx/app-initialized
  rm -f ./nginx/nginx-app-start
  rm -f ./nginx/nginx-app-end
  
  (
    sleep 50
    if [ -e ./nginx/nginx-app-start ] && [ ! -e ./nginx/nginx-app-end ] && [ ! -e ./nginx/app-initialized ]
    then
      echo "forcing 50s init..."
      touch ./nginx/app-initialized
    fi
  ) &
  
  ./bin/start-nginx --conf ./backend/config/nginx.conf.coffee $SCRIPT_DIR/app/startApp
fi
