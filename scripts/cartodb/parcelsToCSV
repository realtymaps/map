#!/usr/bin/env coffee

###
Simple script cartodb import via our service upload by fipsCode

options:
--fipsCode - single or multiple fipsCodes
--fileName - file name to save as
--split -  boolean to split file
--psql - boolean to use psql to save the csv, otherwise uses node streaming
--batch_id
--rawEntity - json query object
--select - string delimited by commas
###
Promise = require 'bluebird'
argv = require('yargs').argv
# rewire = require('rewire')
Spinner = require('cli-spinner').Spinner
cartodb = require '../../backend/services/service.cartodb'
logger = require('../../backend/config/logger').spawn('scripts:cartodb:parcelToGeo')
# console.log(cartodb)

makeSpinner = () ->
  spinner = new Spinner('running.. %s')
  spinner.setSpinnerString('|/-\\')
  spinner.start()
  spinner


if !argv.fipsCode
  console.error('fipsCode required')
  process.exit(1)

logger.debug -> argv.fipsCode
logger.debug -> typeof(argv.fipsCode)

fipsCodes = argv.fipsCode.toString().split(',')

spin = makeSpinner()

Promise.each fipsCodes, (fips_code) ->
  fileName = argv.filename || argv.fileName
  fileName ?= fips_code.toString()
  fileName = '/tmp/' + fileName


  method  = if !argv.psql?
    if argv.split?
      'split'
    else
      'toCSV'
  else 'toPsqlCSV'

  opts = if !argv.split
    obj = {fileName, fips_code, batch_id: argv.batch_id, rawEntity: JSON.parse(argv.rawEntity)}
    obj.select = argv.select.split(',') if argv.select
    obj
  else
    cartodb.splitCommands {fileName, fips_code, lineCount: cartodb.MAX_LINE_COUNT}

  cartodb[method](opts)
  .then (result) ->
    logger.debug -> "fipsCode: #{fips_code} completed"
    logger.debug -> result
.then () ->
  logger.debug -> "@@@@ TOTAL SUCCESS @@@@"
  process.exit(0)
.finally ->
  spin.stop()
.catch  (error) ->
  logger.debug -> "@@@@ ERROR @@@@"
  if(error)
    logger.debug -> "@@@@ STACK @@@@"
    logger.debug -> error.stack
  process.exit(2)
