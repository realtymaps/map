#!/bin/bash
set -e

DIR="$( cd -P "$( dirname "${BASH_SOURCE[0]}" )" > /dev/null && pwd )"
cd "$DIR"


if [ "$#" -lt 2 ]
then
    echo "usage: `basename $0` <heroku|github> <project> [<destination refspec>]"
    exit 1
fi


if [ -z "$CIRCLECI" ]
then
    # manually run
    echo "ERROR: This is only intended to be run by CircleCI."
    exit 1
fi


SERVICE="$1"
PROJECT="$2"
DESTINATION="$3"
if [ -z "$DESTINATION" ]
then
    DESTINATION="master"
fi

echo "attempting to push to ${DESTINATION} on ${PROJECT} at ${SERVICE}"



if [[ "$CIRCLE_BRANCH" == "master" && "$CIRCLE_PROJECT_USERNAME" != "realtymaps" ]]
then
    # safety check -- we only want to push from master if we're on the main
    # "realtymaps" fork, so we're going to bail out here
    echo "refusing to push changes from master on ${CIRCLE_PROJECT_USERNAME}"
    exit 1
fi


setHerokuSetting () {
    SETTING_NAME=$1
    DESIRED_VALUE=$2
    
    echo "checking value of Heroku setting: $SETTING_NAME"
    
    exec 5>&1
    CURRENT_SETTING=$(heroku config:get $SETTING_NAME --app=$PROJECT|tee >(cat - >&5))
    exec 5>&-
    if [[ "$CURRENT_SETTING" != "$DESIRED_VALUE" ]]
    then
        echo "current value is '$CURRENT_SETTING', changing to '$DESIRED_VALUE'" 
        HEROKU_SETTINGS="$HEROKU_SETTINGS $SETTING_NAME=$DESIRED_VALUE"
    else
        echo "current value is correct ('$CURRENT_SETTING')"
    fi
}

forkStagingDb () {
    DB_VARIABLE_BASE=$1
    SOURCE_APP_NAME=$2
    
    echo "attempting to fork $DB_VARIABLE_BASE from app: $SOURCE_APP_NAME"
    
    # first de-provision the old fork (if there is one)
    exec 5>&1
    OLD_FORK=$(heroku config:get ${DB_VARIABLE_BASE}_VARIABLE --app=$PROJECT|tee >(cat - >&5))
    exec 5>&-
    if [ -n "$OLD_FORK" ]
    then
        echo "de-provisioning previously forked db: $OLD_FORK"
        heroku addons:remove ${OLD_FORK%_URL} --app=$PROJECT
    fi
    
    # fork a new copy
    echo "forking new copy"
    
    exec 5>&1
    FORK_OUTPUT=$(heroku addons:add heroku-postgresql:standard-0 --fork "${SOURCE_APP_NAME}:${DB_VARIABLE_BASE}_URL --app=$PROJECT"|tee >(cat - >&5))
    exec 5>&-
    
    NEW_VARIABLE=`cat $FORK_OUTPUT | fgrep 'Attached as' | cut -f3 -d' '`
    
    echo "fork name captured: $NEW_VARIABLE"
    
    # save the value in a config variable so we can remove it later
    setHerokuSetting "${DB_VARIABLE_BASE}_VARIABLE" "$NEW_VARIABLE"
}


# pre-push tasks
if [[ "$SERVICE" == "heroku" ]]
then
    cp ../.netrc ../../.netrc
    chmod 0600 ../../.netrc
    
    HEROKU_SETTINGS=""
    
    if [[ "$CIRCLE_PROJECT_USERNAME" == "realtymaps" ]]
    then
        # this is a prod push
        setHerokuSetting "NODE_ENV" "production"
    else
        # this is a staging push
        setHerokuSetting "NODE_ENV" "staging"
        # fork the user db
        forkStagingDb "USER_DATABASE" "realtymaps-map"
        
        # note that for now, we're just re-using the property db (via the
        # envSync script) since the map project isn't writing to it.  This
        # may need to be adjusted later if we ever have breaking schema
        # changes to that db that we need to manage
        
        echo "waiting for databases to finish forking..."
        heroku pg:wait --app=$PROJECT
    fi
    
    if [ -n "$HEROKU_SETTINGS" ]
    then
        echo "setting config values: $HEROKU_SETTINGS"
        heroku config:set $HEROKU_SETTINGS --app=$PROJECT
    fi
fi


# do the push
echo "pushing to ${SERVICE}"
git push --force "git@${SERVICE}.com:${PROJECT}.git" "${CIRCLE_SHA1}:${DESTINATION}"
