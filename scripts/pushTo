#!/bin/bash
set -e

if [ ! -n "$IS_HEROKU" ]
then
    DIR="$( cd -P "$( dirname "$0" )" > /dev/null && pwd )"
    cd "$DIR/.."
fi


if [ "$#" -lt 2 ]
then
    echo "usage: `basename $0` <heroku|github> <project> [<destination refspec>]"
    exit 1
fi


if [ -z "$CIRCLECI" ]
then
    # manually run
    echo "ERROR: This is only intended to be run by CircleCI."
    exit 1
fi


SERVICE="$1"
PROJECT="$2"
DESTINATION="$3"
if [ -z "$DESTINATION" ]
then
    DESTINATION="master"
fi

echo "attempting to push to ${DESTINATION} on ${PROJECT} at ${SERVICE}"



if [[ "$CIRCLE_BRANCH" == "master" && "$CIRCLE_PROJECT_USERNAME" != "realtymaps" ]]
then
    # safety check -- we only want to push from master if we're on the main
    # "realtymaps" fork, so we're going to bail out here
    echo "refusing to push changes from master on ${CIRCLE_PROJECT_USERNAME}"
    exit 0
fi


# pre-push tasks
if [[ "$SERVICE" == "heroku" ]]
then
    source ./scripts/herokuUtils
    doHerokuSetup
    
    if [[ "$CIRCLE_PROJECT_USERNAME" == "realtymaps" ]]
    then
        # this is a prod push
        queueHerokuSetting "NODE_ENV" "production"
    else
        # this is a staging push
        queueHerokuSetting "NODE_ENV" "staging"
        
        # fork the user db
        # note that for now, we're just re-using the property db (via the
        # envSync script) since the map project isn't writing to it.  This
        # may need to be adjusted later if we ever have breaking schema
        # changes to that db that we need to manage
        #forkStagingDb "USER_DATABASE" "realtymaps-map"
        
        #echo "waiting for databases to finish forking..."
        #heroku pg:wait --app=$PROJECT
    fi
    
    setQueuedHerokuSettings
fi


# do the push
echo "pushing to ${SERVICE}"
git push --force "git@${SERVICE}.com:${PROJECT}.git" "${CIRCLE_SHA1}:${DESTINATION}"
